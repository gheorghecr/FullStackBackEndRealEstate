openapi: 3.0.0
info:
  version: 1.0.0
  title: 304CEM Back End Assignment API
  description: A Real Estate website.
  contact:
    name: Gheorghe Craciun
    email: craciun2@coventry.ac.uk
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://maximum-arena-3000.codio-box.uk/api'
    description: Development server
tags:
  - name: Users
    description: API endpoints for user management.
  - name: Properties
    description: Access and perform CRUD operations on properties entries.
  - name: Categories
    description: Access and perform CRUD operations on property category.   
  - name: Features
    description: Access and perform CRUD operations on property features. 
  - name: Messages
    description: Access and perform CRUD operations on messages. 
  - name: Images
    description: Access and perform CRUD operations on Images. 
paths:
  /users:
    summary: Represents an individual user.
    description: >
      This resource represents an individual user in the system.
      Each user is identified by a numeric `id`.
    post:
      tags:
        - Users
      description:
        Create a new user account.
      requestBody:
        description: All new user data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./user_schema.json#/definitions/user
      responses:
        '201':
          description: User created.
          content:
            application/json:
              schema:
                $ref: ./user_schema.json#/definitions/userUpdated
        '501':
          description: User not created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorDescription:
                    type: String
    get:
      tags:
        - Users
      description:
        Get a list of all users.
      responses:
        '200':
          description: List of users.
          content:
            application/json:
              schema:
                $ref: ./user_schema.json#/definitions/userList
        '401':
          description: Only admin users can list all accounts.
  /users/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the user.
    get:
      tags:
        - Users
      description:
        Get user by id.
      responses:
        '200':
          description: View of user record.
          content:
            application/json:
              schema:
                $ref: ./user_schema.json#/definitions/userView
        '401':
          description: Non-admin users can only view their own record.
        '404':
          description: Not found.
    put:
      tags:
        - Users
      description:
        Update user by id.
      requestBody:
        description: Update a visible property or the password.
        required: true
        content:
          application/json:
            schema:
              $ref: ./user_schema.json#/definitions/userUpdate
      responses:
        '200':
          description: Confirmation and link to record.
          content:
            application/json:
              schema:
                $ref: ./user_schema.json#/definitions/userUpdated
        '403': 
          description: No permission to update this.
        '404':
          description: Not found.
        '501':
          description: Nothing was updated.
    delete:
      tags:
        - Users
      description:
        Delete user by id.
      responses:
        '200':
          description: Confirmation of deletion.
          content:
            application/json:
              schema:
                $ref: ./user_schema.json#/definitions/userDeleted
        '403':
          description: No Permissions to delete.
        '404':
          description: Not found.
        '501':
          description: Not implemented.
  /users/login:
    get:
      tags:
        - Users
      description:
        Basic AUTH for Login a user.
      responses:
        '200':
          description: View of user record.
          content:
            application/json:
              schema:
                $ref: ./user_schema.json#/definitions/userLogin
        '401':
          description: Could not authenticate user.
  /properties:
    summary: Represents an list of properties
    description: >
      This resource represents an list of properties in the system.
      Each property is identified by a numeric `id`.    
    get:
      tags:
        - Properties
      description:
        Get a list of all properties.
      responses:
        '200':
          description: List of properties.
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertiesView
        '404':
          description: No properties where found.
    post:
      tags:
        - Properties
      description:
        Add a new property.
      requestBody:
        description: All new property data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./properties_schema.json#/definitions/addProperty
      responses:
        '201':
          description: Property added.
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertyUpdated
        '403':
          description: No permission to add a new property.
        '501':
          description: Property not added.
  /properties/adminview:
    summary: Represents an property.
    description: >
      This resource represents an individual property in the system that os only available for ADMINS.
      Each property is identified by a numeric `id`. 
    get:
      tags:
        - Properties
      description:
        Get all properties available for the current user (admin) to view.
      responses:
        '200':
          description: List of properties available for the current user (admin).
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertiesView
        '401':
          description: Non-admin users don't have access to this.
        '404':
          description: No properties where found.
  /properties/adminview/highPriority:
    summary: Represents an property.
    description: >
      This resource represents an individual property in the system that os only available for ADMINS.
      And are marked as High Priority.
      Each property is identified by a numeric `id`. 
    get:
      tags:
        - Properties
      description:
        Get all the high priority properties available for the current user (admin) to view.
      responses:
        '200':
          description: List of high priority properties available for the current user (admin).
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertiesView
        '401':
          description: Non-admin users don't have access to this.
        '404':
          description: No properties where found.
  /properties/search/admin?{q}:
    summary: Represents an list of properties.
    description: >
      This allows an Admin to search in his property's for a property by it's title, description, or location.
      Each property is identified by a numeric `id`. 
    get:
      tags:
        - Properties
      description:
        ADMIN ONLY.
        Search for a property givin a search string on the URL as a field (q). 
        This will only retrieve the properties that belong to the current user
      responses:
        '200':
          description: List of properties available for the current user (admin).
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertiesView
        '400':
          description: Error, the query string must be at least 3 characters.
        '404':
          description: No properties where found with the query string.
  /properties/search?{q}:
    summary: Represents an list of properties.
    description: >
      This allows an user to search for a property by it's title, description, or location.
      Each property is identified by a numeric `id`. 
    get:
      tags:
        - Properties
      description:
        Search for a property givin a search string on the URL as a field (q). 
      responses:
        '200':
          description: List of properties found using the query string.
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertiesView
        '400':
          description: Error, the query string must be at least 3 characters.
        '404':
          description: No properties where found with the query string.
  /properties/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the property.
    get:
      tags:
        - Properties
      description:
        Get property by id.
      responses:
        '200':
          description: View of property record.
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertiesView
        '404':
          description: Not found.
    delete:
      tags:
        - Properties
      description:
        Delete property by id.
      responses:
        '200':
          description: Confirmation of deletion.
          content:
            application/json:
              schema:
                $ref: ./user_schema.json#/definitions/userDeleted
        '400':
          description: Bad Request.
        '403':
          description: No Permissions to delete.
        '404':
          description: Not found.
  /properties/highpriority:
    summary: Represents an list of properties with high priority.
    description: >
      This resource represents an list of properties that have high priority.
      Each property is identified by a numeric `id`. 
    get:
      tags:
        - Properties
      description:
        Get all properties with high priority.
      responses:
        '200':
          description: List of properties with high priority.
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertyDeleted
        '404':
          description: No properties with high priority where found.
  /properties/togglehighpriority/{id}:
    summary: Represents an list of properties with high priority.
    description: >
      This resource toggles the high priority attribute of a property.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the property.
    get:
      tags:
        - Properties
      description:
        Toggle the high priority attribute of a property.
      responses:
        '200':
          description: Confirmation of update.
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertiesToggleHighPriority
        '403':
          description: No Permissions to update.
        '404':
          description: No properties with high priority where found.
        '501':
          description: Not implemented.
  /properties/togglevisibility/{id}:
    summary: Represents an list of properties that are visible to all users.
    description: >
      This resource toggles the visibility attribute of a property.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the property.
    get:
      tags:
        - Properties
      description:
        Toggle the visibility attribute of a property.
      responses:
        '200':
          description: Confirmation of update.
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertiesToggleVisibility
        '403':
          description: No Permissions to update.
        '404':
          description: No properties with high priority where found.
        '501':
          description: Not implemented.
  /properties/status/{id}:
    summary: Update property Status.
    description: >
      This resource updates the status attribute of the property.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the property.
    put:
      tags:
        - Properties
      description:
        Update property status.
      requestBody:
        description: Property new status.
        required: true
        content:
          application/json:
            schema:
              $ref: ./properties_schema.json#/definitions/propertyUpdateStatus
      responses:
        '200':
          description: Confirmation of update.
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertyUpdated
        '501':
          description: Negation of update.
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertyUpdated
        '403':
          description: No Permissions to update.
        '404':
          description: No properties with high priority where found.
  /properties/seller/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the property.
    get:
      tags:
        - Properties
      description:
        Get property's fo a specific seller by seller ID.
      responses:
        '200':
          description: View of property record.
          content:
            application/json:
              schema:
                $ref: ./properties_schema.json#/definitions/propertiesView
        '404':
          description: Not found.
  /categories:
    summary: Represents the property categories list.
    description: >
      This resource represents the list of property categories.
    get:
      tags:
        - Categories
      description:
        Get the list of property categories.
      responses:
        '201':
          description: List of property categories.
          content:
            application/json:
              schema:
                $ref: ./categories_schema.json#/definitions/categoryList
        '404':
          description: Nothing found.
    post:
      tags:
        - Categories
      description:
        Add a new category.
      requestBody:
        description: All category data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./categories_schema.json#/definitions/addCategory
      responses:
        '201':
          description: Category added
          content:
            application/json:
              schema:
                $ref: ./categories_schema.json#/definitions/categoryUpdated
        '403':
          description: No permission to add a new category.
        '501':
          description: Category not added.

  /categories/{id}:
    summary: Represents the categories for a given house.
    description: >
      This resource represents the categories for a given house.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the category.
    get:
      tags:
        - Categories
      description:
        Get the list of categories for a given property.
      responses:
        '201':
          description: List of categories for the property.
          content:
            application/json:
              schema:
                $ref: ./categories_schema.json#/definitions/categoriesForGivenProperty
        '404':
          description: Nothing found.
    delete:
      tags:
        - Categories
      description:
        Delete category by id.
      responses:
        '200':
          description: Confirmation of deletion.
          content:
            application/json:
              schema:
                $ref: ./categories_schema.json#/definitions/categoryDeleted
        '403':
          description: No Permissions to delete.
        '501':
          description: Category not deleted.
    put:
      tags:
        - Categories
      description:
        Update category.
      requestBody:
        description: Category new attributes.
        required: true
        content:
          application/json:
            schema:
              $ref: ./categories_schema.json#/definitions/updateCategory
      responses:
        '200':
          description: Confirmation of update.
          content:
            application/json:
              schema:
                $ref: ./categories_schema.json#/definitions/categoryUpdated
        '403':
          description: No Permissions to update.
        '501':
          description: Nothing was updated.

  /features:
    summary: Represents the property features list.
    description: >
      This resource represents the list of property features.
    get:
      tags:
        - Features
      description:
        Get the list of property features.
      responses:
        '201':
          description: List of property features.
          content:
            application/json:
              schema:
                $ref: ./features_schema.json#/definitions/featuresList
        '404':
          description: Nothing found.  
    post:
      tags:
        - Features
      description:
        Add a new feature.
      requestBody:
        description: All feature data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./features_schema.json#/definitions/addFeatures
      responses:
        '201':
          description: Feature added
          content:
            application/json:
              schema:
                $ref: ./features_schema.json#/definitions/featureUpdated
        '403':
          description: No permission to add a new feature.
        '501':
          description: Feature not added.
  
  /features/{id}:
    summary: Represents the features for a given house.
    description: >
      This resource represents the features for a given house.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the feature.
    get:
      tags:
        - Features
      description:
        Get the list of features for a given property.
      responses:
        '201':
          description: List of features for the property.
          content:
            application/json:
              schema:
                $ref: ./features_schema.json#/definitions/featuresForGivenProperty
        '404':
          description: Nothing found.
    delete:
        tags:
          - Features
        description:
          Delete feature by id.
        responses:
          '200':
            description: Confirmation of deletion.
            content:
              application/json:
                schema:
                  $ref: ./features_schema.json#/definitions/featureDeleted
          '403':
            description: No Permissions to delete.
          '501':
            description: Category not deleted.
    put:
      tags:
        - Features
      description:
        Update feature.
      requestBody:
        description: Feature new properties.
        required: true
        content:
          application/json:
            schema:
              $ref: ./features_schema.json#/definitions/featureUpdated
      responses:
        '200':
          description: Confirmation of update.
          content:
            application/json:
              schema:
                $ref: ./features_schema.json#/definitions/featureUpdated
        '403':
          description: No Permissions to update.
        '501':
          description: Nothing was updated.
  /features/propertyFeatures:
    summary: Represents the  features of a property list.
    description: >
      This resource represents the list of  features for a property. 
    post:
      tags:
        - Features
      description:
        Add a new feature for a property.
      requestBody:
        description: Data necessary to add a feature for a property.
        required: true
        content:
          application/json:
            schema:
              $ref: ./features_schema.json#/definitions/addFeaturesForProperty
      responses:
        '201':
          description: Feature added
          content:
            application/json:
              schema:
                $ref: ./features_schema.json#/definitions/propertyFeatureAdded
        '403':
          description: No permission to add a new feature to a property.
        '501':
          description: Property Feature not added.
  /features/propertyFeatures/{id}:
    summary: Represents the  features of a property list.
    description: >
      This resource represents the list of  features for a property. 
    delete:
        tags:
          - Features
        description:
          Delete a property feature by propertyFeatureID.
        responses:
          '200':
            description: Confirmation of deletion.
            content:
              application/json:
                schema:
                  $ref: ./features_schema.json#/definitions/featureDeleted
          '403':
            description: No Permissions to delete.
          '501':
            description: Property feature not deleted.
  /messages/agent/{id}:
    summary: Represents the messages for an agent.
    description: >
      This resource represents the messages for an agent.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the agentID.
    get:
        tags:
          - Messages
        description:
          Get the all messages for an given agentID.
        responses:
          '201':
            description: List of messages for the given agent ID.
            content:
              application/json:
                schema:
                  $ref: ./messages_schema.json#/definitions/messagesList
          '403':
            description: No Permissions to read.
          '404':
            description: Nothing found.
  /messages/{id}:
    summary: Represents an message.
    description: >
      This resource represents an message.
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the message.
    delete:
        tags:
          - Messages
        description:
          Delete message by it's ID.
        responses:
          '200':
            description: Confirmation of deletion.
            content:
              application/json:
                schema:
                  $ref: ./messages_schema.json#/definitions/messageDeleted
          '403':
            description: No Permissions to delete.
          '404': 
            description: Message not found.
          '501':
            description: Message not deleted.
    put:
      tags:
        - Messages
      description:
        Toggle archived property of a message.
      responses:
        '200':
          description: Confirmation of update.
          content:
            application/json:
              schema:
                $ref: ./messages_schema.json#/definitions/messageUpdated
        '403':
          description: No Permissions to update.
        '404': 
            description: Message not found.
        '501':
          description: Nothing was updated.
  /messages:
    summary: Represents the messages.
    description: >
      This resource represents the messages.
    post:
      tags:
        - Messages
      description:
        Add a message.
      requestBody:
        description: Message properties.
        required: true
        content:
          application/json:
            schema:
              $ref: ./messages_schema.json#/definitions/addMessage
      responses:
        '201':
          description: Message added.
          content:
            application/json:
              schema:
                $ref: ./messages_schema.json#/definitions/messageUpdated
        '501':
          description: Message not added.
  /images/{propID}:
    summary: Represents an property image.
    description: >
      This resource represents an property image.
      Each image is identified by a numeric `id`.
    post:
      tags:
        - Images
      description:
        Add a new image for a property.
      requestBody:
        description: Image data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./images_schema.json#/definitions/addImage
      responses:
        '201':
          description: Image added.
          content:
            application/json:
              schema:
                $ref: ./images_schema.json#/definitions/imageAdded
        '403':
          description: No Permissions to add an image.
        '501':
          description: Image not added.
    get:
      tags:
        - Images
      description:
        Get the list of images name for a property by property ID.
      responses:
        '201':
          description: Images name list.
          content:
            application/json:
              schema:
                $ref: ./images_schema.json#/definitions/imagesNameForGivenProperty
        '404':
          description: Nothing found.
  /images/{imageID}:
    summary: Represents an property image.
    description: >
      This resource represents an property image.
      Each image is identified by a numeric `id`.
    delete:
        tags:
          - Images
        description:
          Delete image by it's ID.
        responses:
          '200':
            description: Confirmation of deletion.
            content:
              application/json:
                schema:
                  $ref: ./images_schema.json#/definitions/imageDeleted
          '403':
            description: No Permissions to delete.
          '404': 
            description: Image not found.
          '501':
            description: Image not deleted.
  